<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://pats-chen.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://pats-chen.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2025-08-28T19:20:39+00:00</updated><id>https://pats-chen.github.io//feed.xml</id><title type="html">Jiazhe Chen</title><subtitle>Welcome to Jiazhe Chen&apos;s personal website! </subtitle><entry><title type="html">Remove Secrets from Commit History</title><link href="https://pats-chen.github.io//blog/2025/remove-secrets-from-commit-history/" rel="alternate" type="text/html" title="Remove Secrets from Commit History"/><published>2025-08-28T14:00:00+00:00</published><updated>2025-08-28T14:00:00+00:00</updated><id>https://pats-chen.github.io//blog/2025/remove-secrets-from-commit-history</id><content type="html" xml:base="https://pats-chen.github.io//blog/2025/remove-secrets-from-commit-history/"><![CDATA[<p>Situation:</p> <p>There is hard-coded secret keys in commit history. The hard-coded string has been removed in files, but the history remains, so it is still exposed.</p> <p>Goal:</p> <p>Remove secret keys in commit history</p> <p>Steps:</p> <p>Use the following command to install pipx before installing history editing tool on a Macbook. This is used to isolate the environment used by the tool from global environment of the device.</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>brew <span class="nb">install </span>pipx
</pre></td></tr></tbody></table></code></pre></figure> <p>After that, use the following command to install git-filter-repo. This is used to edit commit history.</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>pipx <span class="nb">install </span>git-filter-repo
</pre></td></tr></tbody></table></code></pre></figure> <p>Copy a mirror of the current repo and then edit commit history from there. This is used to prevent contaminating the current working environment for other developers.</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre>git clone <span class="nt">--mirror</span> &lt;YOUR_REMOTE_URL&gt; repo-clean.git
<span class="nb">cd </span>repo-clean.git
</pre></td></tr></tbody></table></code></pre></figure> <p>Create a file named <code class="language-plaintext highlighter-rouge">replacements.txt</code> used to replace hard-coded secret keys in commit history. This file should look like the following block.</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="c"># literal example</span>
literal:OLD_PLAIN_TOKEN_ABC123<span class="o">==&gt;</span><span class="k">***</span>REMOVED<span class="k">***</span>

<span class="c"># regex example</span>
regex:sk_live_[0-9A-Za-z]+<span class="o">==&gt;</span><span class="k">***</span>REMOVED<span class="k">***</span>        <span class="c"># Stripe</span>
regex:ghp_[0-9A-Za-z]<span class="o">{</span>36,<span class="o">}==&gt;</span><span class="k">***</span>REMOVED<span class="k">***</span>        <span class="c"># GitHub PAT</span>
regex:AIza[0-9A-Za-z_-]<span class="o">{</span>35<span class="o">}==&gt;</span><span class="k">***</span>REMOVED<span class="k">***</span>       <span class="c"># Google API Key</span>
regex:sk-[A-Za-z0-9]<span class="o">{</span>48,<span class="o">}==&gt;</span><span class="k">***</span>REMOVED<span class="k">***</span>         <span class="c"># OpenAI New Format</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Run the following command to replace secret keys in commit history.</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>git filter-repo <span class="nt">--replace-text</span> replacements.txt <span class="nt">--refs</span> refs/heads/&lt;YOUR_BRANCH_NAME&gt; <span class="nt">--force</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Remove the mirror attribute of the git repo and push changes to a new branch.</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="c"># set mirror to false</span>
git config remote.origin.mirror <span class="nb">false</span>
<span class="c"># push it to a new branch</span>
git push origin refs/heads/&lt;YOUR_BRANCH_NAME&gt;-clean:refs/heads/&lt;YOUR_BRANCH_NAME&gt;-clean
</pre></td></tr></tbody></table></code></pre></figure> <p>Push the new branch to the remote origin. Resolve potential conflicts if there are any. Done!</p>]]></content><author><name></name></author><category term="computer-science"/><category term="git"/><summary type="html"><![CDATA[A post on methods to remove exposed secrets from commit history]]></summary></entry><entry><title type="html">How to Check Port Used</title><link href="https://pats-chen.github.io//blog/2025/how-to-check-port-used/" rel="alternate" type="text/html" title="How to Check Port Used"/><published>2025-03-16T21:52:00+00:00</published><updated>2025-03-16T21:52:00+00:00</updated><id>https://pats-chen.github.io//blog/2025/how-to-check-port-used</id><content type="html" xml:base="https://pats-chen.github.io//blog/2025/how-to-check-port-used/"><![CDATA[<p>Start a Windows Terminal window and enter the following command:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>netstat <span class="nt">-ano</span> | findstr LISTENING
</pre></td></tr></tbody></table></code></pre></figure> <p>This will use <code class="language-plaintext highlighter-rouge">netstat</code> to list all the ports that are currently in use. The output will be like this:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre>  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       1728
  TCP    <span class="o">[</span>::]:445               <span class="o">[</span>::]:0                 LISTENING       4
</pre></td></tr></tbody></table></code></pre></figure> <p>Make sure that the port is not being used by another application if you want your application to run on that port. Done!</p>]]></content><author><name></name></author><category term="computer-science"/><category term="windows"/><category term="port"/><summary type="html"><![CDATA[A post on methods to check port used in Windows]]></summary></entry><entry><title type="html">How to Move Conda Environment</title><link href="https://pats-chen.github.io//blog/2025/how-to-move-conda-environment/" rel="alternate" type="text/html" title="How to Move Conda Environment"/><published>2025-02-11T21:57:00+00:00</published><updated>2025-02-11T21:57:00+00:00</updated><id>https://pats-chen.github.io//blog/2025/how-to-move-conda-environment</id><content type="html" xml:base="https://pats-chen.github.io//blog/2025/how-to-move-conda-environment/"><![CDATA[<p>Activate the conda environment that you want to move. Then, enter the following command:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre>conda activate C:<span class="se">\U</span>sers<span class="se">\Y</span>ourUserName<span class="se">\.</span>conda<span class="se">\e</span>nvs<span class="se">\Y</span>ourEnvironmentName
conda <span class="nb">env export</span> <span class="o">&gt;</span> C:<span class="se">\U</span>sers<span class="se">\Y</span>ourUserName<span class="se">\Y</span>ourEnvironmentName.yml
</pre></td></tr></tbody></table></code></pre></figure> <p>This will create a YAML file that contains the environmentâ€™s dependencies.<br/> After that, deactivate the environment, and then remove the environment by the following command:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>conda remove <span class="nt">--prefix</span> C:<span class="se">\U</span>sers<span class="se">\Y</span>ourUserName<span class="se">\.</span>conda<span class="se">\e</span>nvs<span class="se">\Y</span>ourEnvironmentName <span class="nt">--all</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Finally, create a new environment by the following command:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre>conda <span class="nb">env </span>create <span class="nt">-p</span> E:<span class="se">\P</span>rogramData<span class="se">\M</span>iniconda3<span class="se">\e</span>nvs<span class="se">\Y</span>ourNewEnvironmentName <span class="nt">-f</span> C:<span class="se">\U</span>sers<span class="se">\Y</span>ourUserName<span class="se">\Y</span>ourEnvironmentName.yml
del C:<span class="se">\U</span>sers<span class="se">\Y</span>ourUserName<span class="se">\Y</span>ourEnvironmentName.yml
</pre></td></tr></tbody></table></code></pre></figure> <p>Delete the YAML file after creating the new environment. Done!</p>]]></content><author><name></name></author><category term="computer-science"/><category term="vs-code"/><category term="environment"/><summary type="html"><![CDATA[A post on how to move conda environment in Windows]]></summary></entry><entry><title type="html">How to Solve Missing Credentials</title><link href="https://pats-chen.github.io//blog/2023/how-to-solve-missing-credentials/" rel="alternate" type="text/html" title="How to Solve Missing Credentials"/><published>2023-04-20T04:29:00+00:00</published><updated>2023-04-20T04:29:00+00:00</updated><id>https://pats-chen.github.io//blog/2023/how-to-solve-missing-credentials</id><content type="html" xml:base="https://pats-chen.github.io//blog/2023/how-to-solve-missing-credentials/"><![CDATA[<p>For Git version &lt; v2.36.1, enter this command:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>git config <span class="nt">--global</span> credential.helper <span class="s2">"/mnt/c/Program</span><span class="se">\ </span><span class="s2">Files/Git/mingw64/libexec/git-core/git-credential-manager.exe"</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Note that the path should be where Git is installed on your device. After that, the error message listed below should be resolved.</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>Missing or invalid credentials.
Error: connect EACCES /run/user/1000/vscode-git-431ee25d9d.sock
    at PipeConnectWrap.afterConnect <span class="o">[</span>as oncomplete] <span class="o">(</span>node:net:1157:16<span class="o">)</span> <span class="o">{</span>
  errno: <span class="nt">-13</span>,
  code: <span class="s1">'EACCES'</span>,
  syscall: <span class="s1">'connect'</span>,
  address: <span class="s1">'/run/user/1000/vscode-git-431ee25d9d.sock'</span>
<span class="o">}</span>
Missing or invalid credentials.
Error: connect EACCES /run/user/1000/vscode-git-431ee25d9d.sock
    at PipeConnectWrap.afterConnect <span class="o">[</span>as oncomplete] <span class="o">(</span>node:net:1157:16<span class="o">)</span> <span class="o">{</span>
  errno: <span class="nt">-13</span>,
  code: <span class="s1">'EACCES'</span>,
  syscall: <span class="s1">'connect'</span>,
  address: <span class="s1">'/run/user/1000/vscode-git-431ee25d9d.sock'</span>
<span class="o">}</span>
/mnt/c/Program<span class="se">\ </span>Files/Git/mingw64/libexec/git-core/git-credential-manager.exe erase: 1: /mnt/c/Program Files/Git/mingw64/libexec/git-core/git-credential-manager.exe: not found
remote: Repository not found.
fatal: Authentication failed <span class="k">for</span> <span class="s1">'github.com/YourOrganization/YourProject.git'</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Reference link: https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-git</p>]]></content><author><name></name></author><category term="computer-science"/><category term="vs-code"/><category term="environment"/><summary type="html"><![CDATA[A post on how to setup github credentials for wsl2]]></summary></entry><entry><title type="html">How to Setup VS Code</title><link href="https://pats-chen.github.io//blog/2023/how-to-setup-vscode/" rel="alternate" type="text/html" title="How to Setup VS Code"/><published>2023-04-04T13:00:00+00:00</published><updated>2023-04-04T13:00:00+00:00</updated><id>https://pats-chen.github.io//blog/2023/how-to-setup-vscode</id><content type="html" xml:base="https://pats-chen.github.io//blog/2023/how-to-setup-vscode/"><![CDATA[<p>Go to File -&gt; Preferences -&gt; Settings. Search for Tab Size or Detect Indentation, go to Detect Indentation and remove the checkbox. Done! No more auto detection for tabs and spaces!</p>]]></content><author><name></name></author><category term="computer-science"/><category term="vs-code"/><category term="environment"/><summary type="html"><![CDATA[A post on how to setup vs code]]></summary></entry></feed>